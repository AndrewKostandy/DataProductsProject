exp(50)
exp(1.5)
exp(15)
exp(.15)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- 1
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
getwd()
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="/Users/andylive33",method="curl")
load("./data/gaData.rda")
gaData$julian <- julian(gaData$date)
head(gaData)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./Users/andylive33",method="curl")
?mtcars
library(datasets)
?datasets
help = "datasets"
library(help = "datasets")
?mtcars
plot(mtcars)
g = ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
librar(GGally)
library(GGally)
g = ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
plot(mtcars)
g
pnorm(1.96)
12.30337416+c(-1,1)*qnorm(0.975)*18.71788443
12.30337416+c(-1,1)*qt(0.975)*18.71788443
12.30337416+c(-1,1)*qt(0.975,df=21)*18.71788443
test<-lm(Fertility~.,swiss)
summary(test)$coef
test
anova(test)
test2<-lm(Fertility~Agriculture,swiss)
anova(test2)
test3<-lm(Fertility~Agriculture+Education)
test3<-lm(Fertility~Agriculture+Education,swiss)
anova(test3)
test4<-lm(Fertility~Agriculture+Education+Examination,swiss)
anova(test4)
anova(test2,test3,test4)
anova(test4,test="chisq")
unique(mtcars$cyl)
lm(mpg~factor(cyl)+wt,mtcars)
summary(lm(mpg~factor(cyl)+wt,mtcars))
summary(mtcars$hp)
unique(swiss$Catholic)
mean(mtcars$mpg)
mean(mtcars$mpg[mtcars$am==0 & mtcars$cyl==6])
mean(mtcars$mpg[mtcars$am==1 & mtcars$cyl==6])
mean(mtcars$mpg[mtcars$am==0 & mtcars$cyl==8])
mean(mtcars$mpg[mtcars$am==1 & mtcars$cyl==8])
mean(mtcars$mpg[mtcars$cyl==6])
mean(mtcars$mpg[mtcars$cyl==8])
names(swiss)
swiss2<-swiss
swiss2$Catholic[swiss2$Catholic<50]<-0
swiss2$Catholic[swiss2$Catholic>=50]<-1
unique(swiss2$Catholic)
swiss2$Catholic<-factor(swiss2$Catholic)
fit1<-lm(Fertility~factor(Catholic),swiss)
summary(fit1)
fit1<-lm(Fertility~factor(Catholic),swiss2)
summary(fit1)
length(swiss)
head(swiss)
swiss2
nrow(swiss)
rep("Blonde",3)
rep("Blonde",3,"Brunette",4)
rep("Blonde","Brunette","Black",3)
swiss2$haircolor[1:3]<"Blonde"
swiss2
swiss2$Hair.Color<-""
swiss2
swiss2[1,5]
swiss2[1:15,7]<-"Blonde"
swiss2
swiss2[16:31,7]<-"Brunette"
swiss2[32:47,7]<-"Black"
swiss2
unique(mtcars$hp)
34.002875+c(-1,1)*qt(.975,df=28)*2.642659
2.083710+c(-1,1)*qt(.975,df=28)*1.376420
28.58963-0.7357586
39.41612+4.9031786
34.002875-0.7357586
34.002875+4.9031786
34.002875+2.08371013
36.08658525+c(-1,1)*qt(.975,df=28)*1.736337869
nrow(mtcars)
mtcars[31,]
62.188
62.188+12.124
mean(swiss2$Fertility)[swiss2$Catholic==0 & swiss2$Hair.Color=="Blonde"]
mean(swiss2$Fertility[swiss2$Catholic==0 & swiss2$Hair.Color=="Blonde"])
62.188+12.124+8.766
mean(swiss2$Fertility[swiss2$Catholic==1 & swiss2$Hair.Color=="Blonde"])
64.7714+4.1730+8.7931
mtcars[17,]
mean(mtcars$mpg[mtcars$am==0])
mean(mtcars$mpg[mtcars$am==1])
fit1<-lm(mpg~factor(am)-1,mtcars)
summary(fit1)
confint(fit1)
test
test2
test3
test4
swiss2
test1<-lm(Fertility~factor(Catholic)+factor(Hair.Color),swiss2)
test2<-lm(Fertility~factor(Catholic)+factor(Hair.Color)+factor(Catholic)*factor(Hair.Color),swiss2)
anova(test1,test2)
summary(test1)$coef
summary(test2)$coef
62.187727 + 8.766263 + 12.123599
mean(swiss2$Fertility[swiss2$Catholic==1 & swiss2$Hair.Color=="Blonde"]
)
64.7714286+4.1730159+7.3000000+8.7930556
mean(swiss2$Fertility[swiss2$Catholic==1 & swiss2$Hair.Color=="Black"]
)
62.187727+8.766263
64.7714286+4.1730159
mean(swiss2$Fertility[swiss2$Catholic==1 & swiss2$Hair.Color=="Brunette"])
62.187727+8.766263+2.139382
64.7714286+4.1730159+-0.6047619+7.1603175
2.935837+c(-1,1)+qt(.975,df=28)*1.4109
2.935837+c(-1,1)*qt(.975,df=28)*1.4109
7.244939+c(-1,1)*qt(.975,df=30)*1.764
2.083710+c(-1,1)*qt(.975,df=28)*1.376420
data(Sprays)
data("InsectSprays")
fit<-lm(Count~Spray,data=InsectSprays)
fit<-lm(count~spray,data=InsectSprays)
summary(fit)
confint(fit)
fit<-lm(count~spray-1,data=InsectSprays)
confint(fit)
summary(fit)
Spray2<-Spray
Spray2<-InsectSprays
spray2<-relevel(InsectSprays$spray,"D")
fit<-lm(count~spray,data=Spray2)
summary(fit)
fit<-lm(count~spray,data=spray2)
spray2<-InsectSprays
spray2<-relevel(InsectSprays$spray,"D")
fit<-lm(count~spray,data=spray2)
spray2
spray2<-InsectSprays
spray2<-relevel(spray2$spray,"D")
spray2
str(spray2)
fit<-lm(count~spray2,data=InsectSprays)
summary(fit)
confint(fit)
fit<-lm(count~spray2-1,data=InsectSprays)
summary(fit)
confint(fit)
spray2<-relevel(spray2$spray,"C")
spray2<-relevel(spray2$InsectSprays,"C")
spray2<-relevel(InsectSprays$spray,"C")
fit<-lm(count~spray2,data=InsectSprays)
summary(fit)
confint(fit)
2.9358+c(-1,1)*qt(.975,df=28)*1.4109
18.8979+c(-1,1)*qt(.975,df=28)*0.7194
library(kernlab); data(spam); set.seed(333)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
spamLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve,col=spamLabel)
rule1 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.40] <- "nonspam"
prediction[(x >= 2.40 & x <= 2.45)] <- "spam"
prediction[(x > 2.45 & x <= 2.70)] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve),smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve),smallSpam$type)
table(rule1(spam$capitalAve),spam$type)
table(rule2(spam$capitalAve),spam$type)
mean(rule1(spam$capitalAve)==spam$type)
mean(rule2(spam$capitalAve)==spam$type)
sum(rule1(spam$capitalAve)==spam$type)
sum(rule2(spam$capitalAve)==spam$type)
(0.99/0.01)*(0.001/0.999)
(1/1.0990991)
(0.99/0.01)*(0.1/0.9)
0.0990991*100
99/(99+999)
1-0.0990991
1+0.0990991
0.0990991/1.0990991
0.09016394*100
(0.99/0.01)*(0.1/0.9)
11/12
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
data(Wage)
summary(Wage)
install.packages("ISLR")
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
str(spam)
library(kernlab)
data(spam)
spam[,32]
str(spam)
names(spam)
names(spam)[c(34,32)]
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
(0.99/0.01)*(0.001/0.999)
0.0990991+1
0.0990991/1.099099
0.09016394*100
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit <- train(type ~.,data=training, method="glm")
modelFit <- train(type ~.,data=training, method="lm")
modelFit <- train(type ~.,data=training, method="glm")
install.packages('e1071', dependencies=TRUE)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit$finalModel
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
folds[[1]][1:20]
folds[[2]][1:20]
folds[[10]][1:20]
folds[[11]][1:20]
folds[[9]][1:20]
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds[[1]][1:10]
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
folds[[1]][1:100]
dim(training)
set.seed(32323)
folds <- createResample(y=spam$type,times=10,
list=TRUE)
sapply(folds,length)
folds[[1]][1:10]
names(folds)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow=20,
horizon=10)
names(folds)
folds$train[[1]]
folds$test[[1]]
folds$train[[2]]
folds$test[[2]]
set.seed(32323)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow=20,
horizon=10)
names(folds)
folds$train[[1]]
folds$test[[1]]
folds$train[[2]]
folds$test[[2]]
folds$train[[3]]
folds$test[[3]]
args(trainControl)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training);dim(testing)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training);dim(testing)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(training);dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training);dim(testing)
head(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
library(Hmisc)
?cut2
cutCement <- cut2(concrete$Cement,g=3)
plot(concrete$CompressiveStrength)
plot(concrete$CompressiveStrength,color=cutCement)
plot(concrete$CompressiveStrength,col=cutCement)
cutBlastFurnaceSlag <- cut2(concrete$BlastFurnaceSlag,g=3)
plot(concrete$CompressiveStrength,col=cutBlastFurnaceSlag)
cutFlyAsh <- cut2(concrete$FlyAsh,g=3)
plot(concrete$CompressiveStrength,col=cutFlyAsh)
cutWater <- cut2(concrete$Water,g=3)
plot(concrete$CompressiveStrength,col=cutWater)
plot(concrete$CompressiveStrength)
plot(concrete$CompressiveStrength,col=cutFlyAsh)
cutSuperplasticizer <- cut2(concrete$Superplasticizer,g=3)
plot(concrete$CompressiveStrength,col=cutSuperplasticizer)
cutCoarseAggregate <- cut2(concrete$CoarseAggregate,g=3)
plot(concrete$CompressiveStrength,col=cutCoarseAggregate)
cutFineAggregate <- cut2(concrete$FineAggregate,g=3)
plot(concrete$CompressiveStrength,col=cutFineAggregate)
cutAge <- cut2(concrete$Age,g=3)
plot(concrete$CompressiveStrength,col=cutAge)
unique(concrete$age)
unique(concrete$Age)
cutAge <- cut2(concrete$Age,g=4)
plot(concrete$CompressiveStrength,col=cutAge)
cutAge <- cut2(concrete$Age,g=8)
plot(concrete$CompressiveStrength,col=cutAge)
cutAge <- cut2(concrete$Age,g=2)
plot(concrete$CompressiveStrength,col=cutAge)
hist(concrete$SuperPlasticizerCement)
hist(concrete$SuperPlasticizer)
unique(concrete$Superplasticizer)
hist(concrete$Superplasticizer)
loggedSup<-log(concrete$Superplasticizer+1)
hist(loggedSup)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
names(training)
names(training)[57:70]
names(training)[58:69]
preProc <- preProcess(log10(training[,58:69]+1),method="pca",pcaComp=2)
preProc <- preProcess(log10(training[,58:69]),method="pca",pcaComp=2)
preProc <- preProcess(training[,58:69],method="pca",pcaComp=2)
preProc
preProc <- preProcess(training[,58:69],method="pca",pcaComp=7)
preProc
?preProc
preProc$rotation
cov(preProc$rotation)
cor(training[,58:69])
prePrco$eigenvalues
preProc$eigenvalues
preProc$eigenvalue
preProc
summary(preProc)
pca <- princomp(training[,58:69])
summary(pca)
1.4947237 +1.2328654+ 1.1784414+ 0.62482551+ 0.5437811 +0.40042942 +0.36239787
5.837464/12
1.4947237 +1.2328654+ 1.1784414+ 0.62482551+ 0.5437811 +0.40042942 +0.36239787 +0.30216932 +0.25401803 +0.25223488 +0.0286080996 +8.838105e-03
5.837464/6.683333
1.4947237 +1.2328654+ 1.1784414+ 0.62482551+ 0.5437811 +0.40042942 +0.36239787 +0.30216932
6.139634/6.683333
0.3523411 +0.2397026+ 0.2190067+ 0.06156856+ 0.0466326+ 0.02528678+ 0.02071156+ 0.01439933+ 0.01017585+ 0.01003348+ 0.0001290683+ 1.231856e-05
0.3523411 +0.2397026 +0.2190067 +0.06156856 +0.0466326 +0.02528678 +0.02071156
preProc <- preProcess(training[,58:69],method="pca",thresh = 0.90)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
training2<-training[,c(1,58:69)]
str(training2)
astheyare<-train(diagnosis ~.,data=training2, method="glm")
predictastheyare <- predict(astheyare,newdata=testing)
confusionMatrix(predictastheyare,testing$diagnosis)
dim(training2)
preProc2<-preProcess(training2[,2:13],method="pca",thresh=0.8)
trainpca<-predict(preProc2,training[,2:13])
trainpca<-predict(preProc2,training2[,2:13])
modelpca<-train(training$diagnosis~.,method="glm",data=trainpca)
str(testing)
predictpca<-predict(preProc2,testing)
confustionMatrix(testing$diagnosis,predict(modelpca,predictpca))
confusionMatrix(testing$diagnosis,predict(modelpca,predictpca))
predictpca<-predict(preProc2,testing[-1])
confustionMatrix(testing$diagnosis,predict(modelpca,predictpca))
confusionMatrix(testing$diagnosis,predict(modelpca,predictpca))
confusionMatrix(predict(modelpca,predictpca),testing$diagnosis)
theprediction<-predict(modelpca,predictpca)
confusionMatrix(testing$diagnosis,theprediction)
update.packages(checkBuilt=TRUE)
installed.packages()
library(ggplot2)
sessionInfo()
x<-c("A","A","B","C","D","D","E","E")
y<-c("B","D","C","A","E","D","E","A")
table(x,y)
str(mtcars)
2.273094e-01
subsets <- c(1:5, 10, 15, 20, 25)
subsets
testx<-data.frame(a=1:4,b=5:8,c=9:12)
x
testx<-data.frame(a=(1:4),b=(5:8),c=(9:12))
textx
testx
library(dplyr)
testy<-select(testx,a,b)
testy
1-0.9998
0.0002
0.0002*100
1-0.9996
0.0004
0.0004*100
?t.test
setwd("/Users/andylive33/Coursera/DDP/MasterProjectwithRF")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/andylive33/Coursera/DDP/DataProductsApp")
runApp()
